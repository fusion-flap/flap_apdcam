!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
ADC	RegReadTest.cpp	12;"	d	file:
APDCAM_ARM	HighlevelFunctions.cpp	/^ADT_RESULT APDCAM_ARM(ADT_HANDLE handle, ADT_MEASUREMENT_MODE mode, uint64_t sampleCount, ADT_CALIB_MODE calibMode, int signalFrequency)$/;"	f
APDCAM_Allocate	HighlevelFunctions.cpp	/^ADT_RESULT APDCAM_Allocate(ADT_HANDLE handle, uint64_t sampleCount, int bits, uint32_t channelMask_1, uint32_t channelMask_2, uint32_t channelMask_3, uint32_t channelMask_4, int primary_buffer_size)$/;"	f
APDCAM_CCControl	HighlevelFunctions.cpp	/^ADT_RESULT APDCAM_CCControl(ADT_HANDLE handle, int opcode, int length, unsigned char *buffer)$/;"	f
APDCAM_CalibLight	HighlevelFunctions.cpp	/^ADT_RESULT APDCAM_CalibLight(ADT_HANDLE \/*handle*\/)$/;"	f
APDCAM_CalibLight	HighlevelFunctions.cpp	/^ADT_RESULT APDCAM_CalibLight(ADT_HANDLE handle, int value)$/;"	f
APDCAM_Calibrate	HighlevelFunctions.cpp	/^ADT_RESULT APDCAM_Calibrate(ADT_HANDLE handle)$/;"	f
APDCAM_CheckSetup	HighlevelFunctions.cpp	/^ADT_RESULT APDCAM_CheckSetup(ADT_HANDLE \/*handle*\/)$/;"	f
APDCAM_Close	HighlevelFunctions.cpp	/^ADT_RESULT APDCAM_Close(ADT_HANDLE handle)$/;"	f
APDCAM_DataMode	HighlevelFunctions.cpp	/^ADT_RESULT APDCAM_DataMode(ADT_HANDLE handle, int modeCode)$/;"	f
APDCAM_Done	HighlevelFunctions.cpp	/^void APDCAM_Done()$/;"	f
APDCAM_Fans	HighlevelFunctions.cpp	/^ADT_RESULT APDCAM_Fans(ADT_HANDLE \/*handle*\/)$/;"	f
APDCAM_Filter	HighlevelFunctions.cpp	/^ADT_RESULT APDCAM_Filter(ADT_HANDLE handle, FILTER_COEFFICIENTS filterCoefficients)$/;"	f
APDCAM_Find	HighlevelFunctions.cpp	/^void APDCAM_Find(ApdCam10G_t *devices, UINT32 from_ip_h, UINT32 to_ip_h, UINT32 *ip_table, int table_size, int *no_of_elements, const char *filter_str, int timeout)$/;"	f
APDCAM_FindFirst	HighlevelFunctions.cpp	/^void APDCAM_FindFirst(ApdCam10G_t *devices, UINT32 from_ip_h, UINT32 to_ip_h, const char *filter_str, int timeout)$/;"	f
APDCAM_Gain	HighlevelFunctions.cpp	/^ADT_RESULT APDCAM_Gain(ADT_HANDLE handle, double highVoltage1, double highVoltage2, double highVoltage3, double highVoltage4, int state)$/;"	f
APDCAM_GetBuffers	HighlevelFunctions.cpp	/^ADT_RESULT APDCAM_GetBuffers(ADT_HANDLE handle, INT16 **buffers)$/;"	f
APDCAM_GetCalibLight	HighlevelFunctions.cpp	/^ADT_RESULT APDCAM_GetCalibLight(ADT_HANDLE handle, int *value)$/;"	f
APDCAM_GetHV	HighlevelFunctions.cpp	/^ADT_RESULT APDCAM_GetHV(ADT_HANDLE handle, double &highVoltage1, double &highVoltage2, double &highVoltage3, double &highVoltage4, int &state)$/;"	f
APDCAM_GetInfo	HighlevelFunctions.cpp	/^ADT_RESULT APDCAM_GetInfo(ADT_HANDLE \/*handle*\/)$/;"	f
APDCAM_GetRingbufferSize	HighlevelFunctions.cpp	/^ADT_RESULT APDCAM_GetRingbufferSize(ADT_HANDLE handle, unsigned short *bufferSize)$/;"	f
APDCAM_GetSWOptios	HighlevelFunctions.cpp	/^void APDCAM_GetSWOptios()$/;"	f
APDCAM_GetSampleInfo	HighlevelFunctions.cpp	/^ADT_RESULT APDCAM_GetSampleInfo(ADT_HANDLE handle, ULONGLONG *sampleCounts, ULONGLONG *sampleIndices)$/;"	f
APDCAM_GetStatus	HighlevelFunctions.cpp	/^ADT_RESULT APDCAM_GetStatus(ADT_HANDLE \/*handle*\/)$/;"	f
APDCAM_Init	HighlevelFunctions.cpp	/^void APDCAM_Init()$/;"	f
APDCAM_List	HighlevelFunctions.cpp	/^void APDCAM_List(UINT32 from_ip_h, UINT32 to_ip_h, UINT32 *ip_table, int table_size, int *no_of_elements, const char *filter_str, int timeout)$/;"	f
APDCAM_LoadCalibration	HighlevelFunctions.cpp	/^ADT_RESULT APDCAM_LoadCalibration(ADT_HANDLE \/*handle*\/)$/;"	f
APDCAM_LoadSetup	HighlevelFunctions.cpp	/^ADT_RESULT APDCAM_LoadSetup(ADT_HANDLE \/*handle*\/)$/;"	f
APDCAM_MeasMode	HighlevelFunctions.cpp	/^ADT_RESULT APDCAM_MeasMode(ADT_HANDLE \/*handle*\/)$/;"	f
APDCAM_Open	HighlevelFunctions.cpp	/^ADT_HANDLE APDCAM_Open(UINT32 ip_h)$/;"	f
APDCAM_OpenDevice	HighlevelFunctions.cpp	/^ADT_HANDLE APDCAM_OpenDevice(ApdCam10G_t *device)$/;"	f
APDCAM_Overload	HighlevelFunctions.cpp	/^ADT_RESULT APDCAM_Overload(ADT_HANDLE \/*handle*\/)$/;"	f
APDCAM_ReadCC	HighlevelFunctions.cpp	/^ADT_RESULT APDCAM_ReadCC(ADT_HANDLE handle, int acktype, unsigned char *value, int firstreg, int length)$/;"	f
APDCAM_ReadFlashPage	HighlevelFunctions.cpp	/^ADT_RESULT APDCAM_ReadFlashPage(ADT_HANDLE handle, int PgAddress, unsigned char *value)$/;"	f
APDCAM_ReadPDI	HighlevelFunctions.cpp	/^ADT_RESULT APDCAM_ReadPDI(ADT_HANDLE handle, unsigned char address, UINT32 subaddress, unsigned char* buffer, int noofbytes)$/;"	f
APDCAM_Reset	HighlevelFunctions.cpp	/^ADT_RESULT APDCAM_Reset(ADT_HANDLE \/*handle*\/)$/;"	f
APDCAM_SWTrigger	HighlevelFunctions.cpp	/^ADT_RESULT APDCAM_SWTrigger(ADT_HANDLE handle)$/;"	f
APDCAM_Sampling	HighlevelFunctions.cpp	/^ADT_RESULT APDCAM_Sampling(ADT_HANDLE handle, int sampleDiv, int \/*sampleSrc*\/)$/;"	f
APDCAM_Save	HighlevelFunctions.cpp	/^ADT_RESULT APDCAM_Save(ADT_HANDLE handle, uint64_t sampleCount)$/;"	f
APDCAM_SaveCalibration	HighlevelFunctions.cpp	/^ADT_RESULT APDCAM_SaveCalibration(ADT_HANDLE \/*handle*\/)$/;"	f
APDCAM_SaveSetup	HighlevelFunctions.cpp	/^ADT_RESULT APDCAM_SaveSetup(ADT_HANDLE \/*handle*\/)$/;"	f
APDCAM_SetAllOffset	HighlevelFunctions.cpp	/^ADT_RESULT APDCAM_SetAllOffset(ADT_HANDLE handle, unsigned int offset)$/;"	f
APDCAM_SetBasicPLL	HighlevelFunctions.cpp	/^ADT_RESULT APDCAM_SetBasicPLL(ADT_HANDLE handle, unsigned char mul, unsigned char div0, unsigned char div1)$/;"	f
APDCAM_SetIP	HighlevelFunctions.cpp	/^ADT_RESULT APDCAM_SetIP(ADT_HANDLE handle, UINT32 ip_h)$/;"	f
APDCAM_SetOffset	HighlevelFunctions.cpp	/^ADT_RESULT APDCAM_SetOffset(ADT_HANDLE \/*handle*\/)$/;"	f
APDCAM_SetRingbufferSize	HighlevelFunctions.cpp	/^ADT_RESULT APDCAM_SetRingbufferSize(ADT_HANDLE handle, unsigned short bufferSize)$/;"	f
APDCAM_SetStreamInterface	HighlevelFunctions.cpp	/^ADT_RESULT APDCAM_SetStreamInterface(ADT_HANDLE handle, const char *ifname)$/;"	f
APDCAM_SetTiming	HighlevelFunctions.cpp	/^ADT_RESULT APDCAM_SetTiming(ADT_HANDLE handle, int basicPLLmul, int basicPLLdiv_0, int basicPLLdiv_1, int clkSource, int extDCMmul, int extDCMdiv)$/;"	f
APDCAM_Shutter	HighlevelFunctions.cpp	/^ADT_RESULT APDCAM_Shutter(ADT_HANDLE handle, int open)$/;"	f
APDCAM_Start	HighlevelFunctions.cpp	/^ADT_RESULT APDCAM_Start(ADT_HANDLE handle)$/;"	f
APDCAM_StartFUP	HighlevelFunctions.cpp	/^ADT_RESULT APDCAM_StartFUP(ADT_HANDLE handle)$/;"	f
APDCAM_Stop	HighlevelFunctions.cpp	/^ADT_RESULT APDCAM_Stop(ADT_HANDLE handle)$/;"	f
APDCAM_StreamDump	HighlevelFunctions.cpp	/^ADT_RESULT APDCAM_StreamDump(ADT_HANDLE handle, uint8_t streamNo, const char *dumpFileName)$/;"	f
APDCAM_SyncADC	HighlevelFunctions.cpp	/^ADT_RESULT APDCAM_SyncADC(ADT_HANDLE handle)$/;"	f
APDCAM_Temperature	HighlevelFunctions.cpp	/^ADT_RESULT APDCAM_Temperature(ADT_HANDLE \/*handle*\/)$/;"	f
APDCAM_Test	HighlevelFunctions.cpp	/^ADT_RESULT APDCAM_Test(ADT_HANDLE handle)$/;"	f
APDCAM_Trigger	HighlevelFunctions.cpp	/^ADT_RESULT APDCAM_Trigger(ADT_HANDLE handle, ADT_TRIGGER trigger, ADT_TRIGGER_MODE mode, ADT_TRIGGER_EDGE edge, int triggerDelay, ADT_TRIGGERINFO* triggerInfo)$/;"	f
APDCAM_Wait	HighlevelFunctions.cpp	/^ADT_RESULT APDCAM_Wait(ADT_HANDLE handle, int timeout)$/;"	f
APDCAM_WritePDI	HighlevelFunctions.cpp	/^ADT_RESULT APDCAM_WritePDI(ADT_HANDLE handle, unsigned char address, UINT32 subaddress, unsigned char* buffer, int noofbytes)$/;"	f
APDTest_Save	APDTest.cpp	/^int APDTest_Save(int ndata)$/;"	f
ARM	APDTest.cpp	/^int ARM(int measurementMode, int sampleCount, int calibrationMode, int signalFrequency)$/;"	f
Add	DataEvaluation.cpp	/^void CTriggerManager::Add(CDataEvaluation* dataEvaluator)$/;"	f	class:CTriggerManager
Add	LnxClasses.cpp	/^CWaitForEvents::WAIT_RESULT CLnxWaitForEvents::Add(CEvent *event) $/;"	f	class:CLnxWaitForEvents
Allocate	APDTest.cpp	/^int Allocate(LONGLONG sampleCount, int bits, uint32_t channelMask_1, uint32_t channelMask_2, uint32_t channelMask_3, uint32_t channelMask_4, int primaryBufferSize)$/;"	f
BASE_LEVEL	HighlevelFunctions.cpp	1565;"	d	file:
BIG	dump_parser.cpp	/^union BIG$/;"	u	file:
BindClient	UDPClient.cpp	/^void CUDPClient::BindClient(UINT16 client_port_h)$/;"	f	class:CUDPClient
CCControl	APDTest.cpp	/^int CCControl(int opcode, int length, unsigned char *data)$/;"	f
CCControl	LowlevelFunctions.cpp	/^bool CCControl(CAPDClient *client, int opcode, int length, unsigned char *buffer)$/;"	f
CC_SERIAL	dump_parser.cpp	6;"	d	file:
CDataEvaluation	DataEvaluation.cpp	/^CDataEvaluation::CDataEvaluation() :$/;"	f	class:CDataEvaluation
CLnxClient	LnxClasses.cpp	/^CLnxClient::CLnxClient() :$/;"	f	class:CLnxClient
CLnxClientContext	LnxClasses.cpp	/^CLnxClientContext::CLnxClientContext() :$/;"	f	class:CLnxClientContext
CLnxEvent	LnxClasses.cpp	/^CLnxEvent::CLnxEvent() :$/;"	f	class:CLnxEvent
CLnxEvent	LnxClasses.cpp	/^CLnxEvent::CLnxEvent(int fd) :$/;"	f	class:CLnxEvent
CLnxNPMAllocator	LnxClasses.cpp	/^CLnxNPMAllocator::CLnxNPMAllocator(uint64_t requestedSize) throw (CNPMemoryException) : CNPMAllocator(requestedSize),$/;"	f	class:CLnxNPMAllocator
CLnxServer	LnxClasses.cpp	/^CLnxServer::CLnxServer() :$/;"	f	class:CLnxServer
CLnxTriggerManager	DataEvaluation.cpp	/^CLnxTriggerManager::CLnxTriggerManager()$/;"	f	class:CLnxTriggerManager
CONTINUOUS_STREAM_DAT	HighlevelFunctions.cpp	509;"	d	file:
CTriggerManager	DataEvaluation.cpp	/^CTriggerManager::CTriggerManager() :$/;"	f	class:CTriggerManager
CUDPClient	UDPClient.cpp	/^CUDPClient::CUDPClient(void) :$/;"	f	class:CUDPClient
CUDPServer	UDPServer.cpp	/^CUDPServer::CUDPServer(void) : UDPBase(), Thread(),$/;"	f	class:CUDPServer
Calibrate	APDTest.cpp	/^int Calibrate()$/;"	f
ClearTrigger	InternalFunctions.cpp	/^bool ClearTrigger(CAPDClient *client)$/;"	f
Close	APDTest.cpp	/^int Close()$/;"	f
CreateCLIENTCONTEXT	LnxClasses.cpp	/^void CLnxClientContext::CreateCLIENTCONTEXT()$/;"	f	class:CLnxClientContext
CreateSocket	SysLnxClasses.cpp	/^bool UDPBase::CreateSocket()$/;"	f	class:UDPBase
DDTOIPHEADER	GECCommands.cpp	/^DDTOIPHEADER::DDTOIPHEADER()$/;"	f	class:DDTOIPHEADER
DEF_DATASIZE	HighlevelFunctions.cpp	28;"	d	file:
DEF_OCTET	HighlevelFunctions.cpp	29;"	d	file:
DEF_PACKETSIZE	HighlevelFunctions.cpp	30;"	d	file:
DataMode	APDTest.cpp	/^int DataMode(int mode)$/;"	f
DoTrigger	DataEvaluation.cpp	/^void CDataEvaluation::DoTrigger()$/;"	f	class:CDataEvaluation
EVENTLIST	LnxClasses.cpp	/^typedef std::list<CEvent*> EVENTLIST;$/;"	t	file:
EnableHV	InternalFunctions.cpp	/^bool EnableHV(CAPDClient *client, bool enable)$/;"	f
EnumerateADCBoards	InternalFunctions.cpp	/^bool EnumerateADCBoards(CAPDClient *client, ApdCam10G_t *device)$/;"	f
ErrorLog	LnxClasses.cpp	/^void CLnxNPMAllocator::ErrorLog(char *message)$/;"	f	class:CLnxNPMAllocator
FAST_COUNTER	dump_parser.cpp	5;"	d	file:
FactoryReset	InternalFunctions.cpp	/^bool FactoryReset(CAPDClient *client, unsigned char address)$/;"	f
FillMap	DataEvaluation.cpp	/^void CDataEvaluation::FillMap()$/;"	f	class:CDataEvaluation
Filter	APDTest.cpp	/^int Filter(int *coeffs)$/;"	f
Filter_6	Helpers.cpp	/^bool Filter_6(const char *filter_str, const char *match_str)$/;"	f
GET_BYTE	DataEvaluation.cpp	9;"	d	file:
GetADCBoardVersion	InternalFunctions.cpp	/^bool GetADCBoardVersion(CAPDClient *client, unsigned char address, unsigned char *boardVersion)$/;"	f
GetADCSerial	InternalFunctions.cpp	/^bool GetADCSerial(CAPDClient *client, unsigned char address, UINT16 *serial)$/;"	f
GetAllHVMonitor	InternalFunctions.cpp	/^bool GetAllHVMonitor(CAPDClient *client, unsigned short *binValues)$/;"	f
GetAllTempSensors	InternalFunctions.cpp	/^bool GetAllTempSensors(CAPDClient *client, double *values)$/;"	f
GetAnalogPower	InternalFunctions.cpp	/^bool GetAnalogPower(CAPDClient *client, int *state)$/;"	f
GetBasicPLL	InternalFunctions.cpp	/^bool GetBasicPLL(CAPDClient *client, unsigned char *mul, unsigned char *div0, unsigned char *div1)$/;"	f
GetBitCount	Helpers.cpp	/^unsigned int GetBitCount(uint64_t uc)$/;"	f
GetBitPosition	Helpers.cpp	/^int GetBitPosition(unsigned char uc, int n)$/;"	f
GetBlockSize	Helpers.cpp	/^unsigned int GetBlockSize(int channels, int bitsPerSample, int *pPaddingBits)$/;"	f
GetBytesPerSample	InternalFunctions.cpp	/^bool GetBytesPerSample(CAPDClient *client, unsigned char address, unsigned int *counters)$/;"	f
GetCCDeviceType	InternalFunctions.cpp	/^bool GetCCDeviceType(CAPDClient *client, uint16_t *deviceType, UINT32 ipAddress_h, UINT16 ipPort_h, int timeout)$/;"	f
GetCCReg	InternalFunctions.cpp	/^bool GetCCReg(CAPDClient *client, int acktype, unsigned char *value, int firstreg, int length, UINT32 ipAddress_h, UINT16 ipPort_h, int timeout)$/;"	f
GetCCSampleCount	InternalFunctions.cpp	/^bool GetCCSampleCount(CAPDClient *client, uint64_t *sampleCount)$/;"	f
GetCCStreamControl	InternalFunctions.cpp	/^bool GetCCStreamControl(CAPDClient *client, unsigned char *streamControl)$/;"	f
GetCCStreamSerial	InternalFunctions.cpp	/^bool GetCCStreamSerial(CAPDClient *client, uint32_t *serial)$/;"	f
GetCalibLight	InternalFunctions.cpp	/^bool GetCalibLight(CAPDClient *client, int *current)$/;"	f
GetChannels	InternalFunctions.cpp	/^bool GetChannels(CAPDClient *client, unsigned char address, unsigned char *channelMask_1, unsigned char *channelMask_2, unsigned char *channelMask_3, unsigned char *channelMask_4)$/;"	f
GetClient	LnxClasses.cpp	/^CAPDClient* CLnxFactory::GetClient() $/;"	f	class:CLnxFactory
GetClientContext	LnxClasses.cpp	/^CClientContext* CLnxFactory::GetClientContext()$/;"	f	class:CLnxFactory
GetClockContol	InternalFunctions.cpp	/^bool GetClockContol(CAPDClient *client, unsigned char *adClockSource, unsigned char *extClockMode, unsigned char *sampleSource)$/;"	f
GetClockEnable	InternalFunctions.cpp	/^bool GetClockEnable(CAPDClient *client, unsigned char *eioSampleOut, unsigned char *controlSampleOut,$/;"	f
GetControl	InternalFunctions.cpp	/^bool GetControl(CAPDClient *client, unsigned char address, unsigned char *control)$/;"	f
GetDACOffset	InternalFunctions.cpp	/^bool GetDACOffset(CAPDClient *client, INT16 *offsets, int first, int no)$/;"	f
GetData12	DataEvaluation.cpp	/^inline uint16_t GetData12(const unsigned char *pData, int offset)$/;"	f
GetData14	DataEvaluation.cpp	/^inline uint16_t GetData14(const unsigned char *pData, int offset)$/;"	f
GetData8	DataEvaluation.cpp	/^inline uint16_t GetData8(const unsigned char *pData, int offset)$/;"	f
GetEvent	LnxClasses.cpp	/^CEvent* CLnxFactory::GetEvent()$/;"	f	class:CLnxFactory
GetExtDCM	InternalFunctions.cpp	/^bool GetExtDCM(CAPDClient *client, unsigned char *mul, unsigned char *div)$/;"	f
GetFPGAVersion	InternalFunctions.cpp	/^bool GetFPGAVersion(CAPDClient *client, unsigned char address, UINT16 *fpgaVersion)$/;"	f
GetFlashPage	InternalFunctions.cpp	/^bool GetFlashPage(CAPDClient *client, int PgAddress, unsigned char *value, UINT32 ipAddress_h, UINT16 ipPort_h, int timeout)$/;"	f
GetHV1	InternalFunctions.cpp	/^bool GetHV1(CAPDClient *client, int *binValue)$/;"	f
GetHV2	InternalFunctions.cpp	/^bool GetHV2(CAPDClient *client, int *binValue)$/;"	f
GetHV3	InternalFunctions.cpp	/^bool GetHV3(CAPDClient *client, int *binValue)$/;"	f
GetHV4	InternalFunctions.cpp	/^bool GetHV4(CAPDClient *client, int *binValue)$/;"	f
GetHVState	InternalFunctions.cpp	/^bool GetHVState(CAPDClient *client, int *state)$/;"	f
GetIndex	HighlevelFunctions.cpp	/^int GetIndex(ADT_HANDLE handle)$/;"	f
GetInt	APDTest.cpp	/^char *GetInt(char *str, int *param)$/;"	f
GetInterfacename	CamServer.cpp	/^const char* CCamServer::GetInterfacename() const$/;"	f	class:CCamServer
GetInternalTriggerLevels	InternalFunctions.cpp	/^bool GetInternalTriggerLevels(CAPDClient *client, UINT16 *levels)$/;"	f
GetMCVersion	InternalFunctions.cpp	/^bool GetMCVersion(CAPDClient *client, unsigned char address, UINT16 *mcVersion)$/;"	f
GetMask	DataEvaluation.cpp	/^static UINT16 GetMask(int bitsPerSample)$/;"	f	file:
GetMaxPacketNo	LnxClasses.cpp	/^unsigned int CLnxServer::GetMaxPacketNo()$/;"	f	class:CLnxServer
GetMaxWaitObjects	LnxClasses.cpp	/^size_t CLnxWaitForEvents::GetMaxWaitObjects()$/;"	f	class:CLnxWaitForEvents
GetMulticastAddr	CamServer.cpp	/^uint32_t CCamServer::GetMulticastAddr() const$/;"	f	class:CCamServer
GetNPMemory	LnxClasses.cpp	/^CNPMAllocator* CLnxFactory::GetNPMemory(ULONGLONG requestedSize)$/;"	f	class:CLnxFactory
GetOverloadLevel	InternalFunctions.cpp	/^bool GetOverloadLevel(CAPDClient *client, unsigned char address, UINT16 *level)$/;"	f
GetOverloadStatus	InternalFunctions.cpp	/^bool GetOverloadStatus(CAPDClient *client, unsigned char address, unsigned char *status)$/;"	f
GetOverloadTime	InternalFunctions.cpp	/^bool GetOverloadTime(CAPDClient *client, unsigned char address, UINT16 *time)$/;"	f
GetPCFWVersion	InternalFunctions.cpp	/^bool GetPCFWVersion(CAPDClient *client, unsigned char *ver)$/;"	f
GetPCSerial	InternalFunctions.cpp	/^bool GetPCSerial(CAPDClient *client, uint16_t *serial)$/;"	f
GetPacketNo	LnxClasses.cpp	/^unsigned int CLnxServer::GetPacketNo()$/;"	f	class:CLnxServer
GetRcvBufferSize	CamServer.cpp	/^int CCamServer::GetRcvBufferSize() const$/;"	f	class:CCamServer
GetReceivedData	LnxClasses.cpp	/^unsigned int CLnxServer::GetReceivedData()$/;"	f	class:CLnxServer
GetResolution	InternalFunctions.cpp	/^bool GetResolution(CAPDClient *client, unsigned char address, int *bitNum)$/;"	f
GetRingbufferSize	InternalFunctions.cpp	/^bool GetRingbufferSize(CAPDClient *client, unsigned char address, UINT16 *bufferSize)$/;"	f
GetSampleCount	InternalFunctions.cpp	/^bool GetSampleCount(CAPDClient *client, uint8_t streamNum, uint64_t *sampleCount)$/;"	f
GetSampleCounts	InternalFunctions.cpp	/^bool GetSampleCounts(CAPDClient *client, uint64_t *sampleCounts)$/;"	f
GetSampleDiv	InternalFunctions.cpp	/^bool GetSampleDiv(CAPDClient *client, UINT16 *sampleDiv)$/;"	f
GetServer	LnxClasses.cpp	/^CAPDServer* CLnxFactory::GetServer()$/;"	f	class:CLnxFactory
GetSetFilterCoefficients	InternalFunctions.cpp	/^bool GetSetFilterCoefficients(CAPDClient *client, unsigned char address, UINT16 *coefficints)$/;"	f
GetShutterMode	HighlevelFunctions.cpp	/^ADT_RESULT GetShutterMode(ADT_HANDLE handle, int *mode)$/;"	f
GetShutterMode	InternalFunctions.cpp	/^bool GetShutterMode(CAPDClient *client, int *mode)$/;"	f
GetShutterState	InternalFunctions.cpp	/^bool GetShutterState(CAPDClient *client, int *state)$/;"	f
GetString	APDTest.cpp	/^char *GetString(char *str, char *param)$/;"	f
GetTestMode	InternalFunctions.cpp	/^bool GetTestMode(CAPDClient *client, UINT32 *mode)$/;"	f
GetToken	APDTest.cpp	/^char *GetToken(char *str, char *token)$/;"	f
GetTrigger	InternalFunctions.cpp	/^bool GetTrigger(CAPDClient *client, ADT_TRIGGER_CONTROL *triggerControl, uint32_t *delay)$/;"	f
GetTrigger	InternalFunctions.cpp	/^bool GetTrigger(CAPDClient *client, ADT_TRIGGER_MODE *triggerSource, ADT_TRIGGER_EDGE *triggerEdge, uint32_t *delay)$/;"	f
GetWaitForEvents	LnxClasses.cpp	/^CWaitForEvents* CLnxFactory::GetWaitForEvents()$/;"	f	class:CLnxFactory
Handler	DataEvaluation.cpp	/^unsigned int CDataEvaluation::Handler()$/;"	f	class:CDataEvaluation
Handler	UDPClient.cpp	/^unsigned int CUDPClient::Handler(void)$/;"	f	class:CUDPClient
Handler	UDPServer.cpp	/^unsigned int CUDPServer::Handler(void)$/;"	f	class:CUDPServer
INTERNAL_HANDLE	HighlevelFunctions.cpp	/^	INTERNAL_HANDLE() :$/;"	f	union:INTERNAL_HANDLE
INTERNAL_HANDLE	HighlevelFunctions.cpp	/^	INTERNAL_HANDLE(ADT_HANDLE ah) :$/;"	f	union:INTERNAL_HANDLE
INTERNAL_HANDLE	HighlevelFunctions.cpp	/^	INTERNAL_HANDLE(unsigned int i, unsigned int mn) :$/;"	f	union:INTERNAL_HANDLE
INTERNAL_HANDLE	HighlevelFunctions.cpp	/^union INTERNAL_HANDLE$/;"	u	file:
InitDone	SysLnxClasses.cpp	/^void Thread::InitDone()$/;"	f	class:Thread
InternalSend	UDPClient.cpp	/^void CUDPClient::InternalSend()$/;"	f	class:CUDPClient
InternalStop	DataEvaluation.cpp	/^void CDataEvaluation::InternalStop()$/;"	f	class:CDataEvaluation
IsSignaled	LnxClasses.cpp	/^bool CLnxEvent::IsSignaled()$/;"	f	class:CLnxEvent
LIBVERSION_MAJOR	HighlevelFunctions.cpp	16;"	d	file:
LIBVERSION_MINOR	HighlevelFunctions.cpp	17;"	d	file:
LITTLE	dump_parser.cpp	/^union LITTLE$/;"	u	file:
LoadTriggerInfo	APDTest.cpp	/^int LoadTriggerInfo(char *fileName, ADT_TRIGGERINFO *trigger, int channelNumber)$/;"	f
MAX_ACK_DATA_LENGTH	InternalFunctions.cpp	860;"	d	file:
MAX_ADC_ADDRESS	InternalFunctions.cpp	16;"	d	file:
MAX_DATASIZE	HighlevelFunctions.cpp	27;"	d	file:
MAX_FLREAD_DATA_LENGTH	InternalFunctions.cpp	890;"	d	file:
MAX_LINE_LENGTH	APDTest.cpp	18;"	d	file:
MAX_RW_BYTES	APDTest.cpp	17;"	d	file:
MAX_SAMPLECOUNT	HighlevelFunctions.cpp	33;"	d	file:
MAX_STREAMNUM	HighlevelFunctions.cpp	24;"	d	file:
MAX_WRITE_SIZE	LowlevelFunctions.cpp	7;"	d	file:
MESSAGE_SIZE	LnxClasses.cpp	569;"	d	file:
MIN_ADC_ADDRESS	InternalFunctions.cpp	15;"	d	file:
MIN_PACKETSIZE	HighlevelFunctions.cpp	26;"	d	file:
MTU	HighlevelFunctions.cpp	25;"	d	file:
MULTICAST	HighlevelFunctions.cpp	941;"	d	file:
Mutex	SysLnxClasses.cpp	/^Mutex::Mutex() :$/;"	f	class:Mutex
MutexGuard	SysLnxClasses.cpp	/^MutexGuard::MutexGuard(Mutex& mutex) :$/;"	f	class:MutexGuard
NOT_IMPL	HighlevelFunctions.cpp	35;"	d	file:
NUM	RegReadTest.cpp	14;"	d	file:
OnAck	CamClient.cpp	/^void CCamClient::OnAck(unsigned char *buffer, int length, void *userData) $/;"	f	class:CCamClient
OnAfterSend	GECClient.cpp	/^void CGECClient::OnAfterSend(int \/*clientSocket*\/, unsigned char *buffer, int length, void *userData)$/;"	f	class:CGECClient
OnBeforeSend	GECClient.cpp	/^void CGECClient::OnBeforeSend(int clientSocket, unsigned char *buffer, int length, sockaddr_in &sockAddr, void *userData)$/;"	f	class:CGECClient
OnDataArrived	GECClient.cpp	/^void CGECClient::OnDataArrived(unsigned char *buffer, int length, void *userData)$/;"	f	class:CGECClient
OnFlashData	CamClient.cpp	/^void CCamClient::OnFlashData(unsigned char *buffer, int length, void *userData) $/;"	f	class:CCamClient
OnNetworkEvent	GECClient.cpp	/^void CGECClient::OnNetworkEvent(int &clientSocket)$/;"	f	class:CGECClient
OnPdiData	CamClient.cpp	/^void CCamClient::OnPdiData(unsigned char *buffer, int length, void *userData) $/;"	f	class:CCamClient
OnRead	CamServer.cpp	/^void CCamServer::OnRead()$/;"	f	class:CCamServer
OnReceiveError	CamClient.cpp	/^void CCamClient::OnReceiveError(void *userData)$/;"	f	class:CCamClient
OnReceiveError	GECClient.cpp	/^void CGECClient::OnReceiveError(void* \/*userData*\/) $/;"	f	class:CGECClient
OnSocketClosed	CamClient.cpp	/^void CCamClient::OnSocketClosed(void *userData)$/;"	f	class:CCamClient
OnSocketClosed	GECClient.cpp	/^void CGECClient::OnSocketClosed(void* \/*userData*\/)$/;"	f	class:CGECClient
OnStop	CamServer.cpp	/^void CCamServer::OnStop()$/;"	f	class:CCamServer
Open	APDTest.cpp	/^int Open(char *param0, int ignore_errors)$/;"	f
PAGESIZE	HighlevelFunctions.cpp	32;"	d	file:
PC	RegReadTest.cpp	13;"	d	file:
Prepare	GECCommands.cpp	/^void DDTOIPHEADER::Prepare(char *_usertext)$/;"	f	class:DDTOIPHEADER
ProcessBlock	DataEvaluation.cpp	/^void CDataEvaluation::ProcessBlock(unsigned char *pData)$/;"	f	class:CDataEvaluation
ProcessData	DataEvaluation.cpp	/^void CDataEvaluation::ProcessData()$/;"	f	class:CDataEvaluation
ProcessFrame	DataEvaluation.cpp	/^void CDataEvaluation::ProcessFrame(const CC_STREAMHEADER *header, const unsigned char *pFrame, unsigned int packetNo)$/;"	f	class:CDataEvaluation
ProcessLine	APDTest.cpp	/^int ProcessLine(char *buffer)$/;"	f
QueryPerformanceCounter	helper.cpp	/^bool QueryPerformanceCounter(LARGE_INTEGER *li)$/;"	f
QueryPerformanceFrequency	helper.cpp	/^bool QueryPerformanceFrequency(LARGE_INTEGER *li)$/;"	f
Read	APDTest.cpp	/^int Read(unsigned char address, UINT32 subaddress, int numbytes)$/;"	f
ReadCC	APDTest.cpp	/^int ReadCC(int acktype, unsigned char *value, int firstreg, int length)$/;"	f
ReadCC	LowlevelFunctions.cpp	/^bool ReadCC(CAPDClient *client, UINT16 acktype, unsigned char *buffer, UINT32 ip_address_h, UINT16 ip_port_h, int timeout)$/;"	f
ReadData	UDPServer.cpp	/^int CUDPServer::ReadData(unsigned char *buffer, int length, sockaddr *from, socklen_t *fromlen)$/;"	f	class:CUDPServer
ReadFlashPage	APDTest.cpp	/^int ReadFlashPage(int PgAddress, unsigned char *value)$/;"	f
ReadFlashPage	LowlevelFunctions.cpp	/^bool ReadFlashPage(CAPDClient *client, UINT16 PgAddress, unsigned char *buffer, UINT32 ip_address_h, UINT16 ip_port_h, int timeout)$/;"	f
ReadLine	APDTest.cpp	/^int ReadLine(FILE * f, char * buffer, int size)$/;"	f
ReadPDI	LowlevelFunctions.cpp	/^bool ReadPDI(CAPDClient *client, unsigned char address, UINT32 subaddress, unsigned char* buffer, int noofbytes, UINT32 ip_address_h, UINT16 ip_port_h, int timeout)$/;"	f
Remove	DataEvaluation.cpp	/^void CTriggerManager::Remove(CDataEvaluation* dataEvaluator)$/;"	f	class:CTriggerManager
Remove	LnxClasses.cpp	/^void CLnxWaitForEvents::Remove(CEvent *event) $/;"	f	class:CLnxWaitForEvents
RemoveAll	DataEvaluation.cpp	/^void CTriggerManager::RemoveAll()$/;"	f	class:CTriggerManager
RemoveAll	LnxClasses.cpp	/^void CLnxWaitForEvents::RemoveAll()$/;"	f	class:CLnxWaitForEvents
Reset	LnxClasses.cpp	/^void CLnxEvent::Reset() $/;"	f	class:CLnxEvent
Reset	LnxClasses.cpp	/^void CLnxServer::Reset()$/;"	f	class:CLnxServer
RetrieveADCOffsets	InternalFunctions.cpp	/^bool RetrieveADCOffsets(CAPDClient *client, INT16 *adcOffsets, int first, int no)$/;"	f
RetrieveADCOffsets_01mV	InternalFunctions.cpp	/^bool RetrieveADCOffsets_01mV(CAPDClient *client, INT16 *adcOffsets, int first, int no)$/;"	f
RetrieveADCSerialNo	InternalFunctions.cpp	/^bool RetrieveADCSerialNo(CAPDClient *client, unsigned char boardVersion, char *serial_no, int len, UINT32 ip_h, UINT16 port_h)$/;"	f
RetrieveDACOffsets_01mV	InternalFunctions.cpp	/^bool RetrieveDACOffsets_01mV(CAPDClient *client, INT16 *dacOffsets, int first, int no)$/;"	f
S1_H	dump_parser.cpp	/^union S1_H$/;"	u	file:
S1_L	dump_parser.cpp	/^union S1_L$/;"	u	file:
SIZE	RegReadTest.cpp	15;"	d	file:
SLOTNUMBER	HighlevelFunctions.cpp	23;"	d	file:
STREAM_PORT_BASE	HighlevelFunctions.cpp	31;"	d	file:
STREAM_PORT_IP	HighlevelFunctions.cpp	20;"	d	file:
STREAM_PORT_MAC	HighlevelFunctions.cpp	21;"	d	file:
Sampling	APDTest.cpp	/^int Sampling(int sampleDiv, int sampleSrc)$/;"	f
SendData	LnxClasses.cpp	/^bool CLnxClient::SendData(BULKCMD* commands, CClientContext *clientContext, UINT32 ipAddress_h, UINT16 ipPort_h)$/;"	f	class:CLnxClient
SendData	LnxClasses.cpp	/^bool CLnxClient::SendData(GECCOMMAND* command, CClientContext *clientContext, UINT32 ipAddress_h, UINT16 ipPort_h)$/;"	f	class:CLnxClient
SendData	UDPClient.cpp	/^bool CUDPClient::SendData(unsigned char* buffer, int length, UINT32 ipAddress_h, UINT16 ipPort_h, void *userData)$/;"	f	class:CUDPClient
Set	LnxClasses.cpp	/^void CLnxEvent::Set() $/;"	f	class:CLnxEvent
SetAnalogPower	InternalFunctions.cpp	/^bool SetAnalogPower(CAPDClient *client, int state)$/;"	f
SetBasicPLL	InternalFunctions.cpp	/^bool SetBasicPLL(CAPDClient *client, unsigned char mul, unsigned char div0, unsigned char div1)$/;"	f
SetBuffer	LnxClasses.cpp	/^void CLnxServer::SetBuffer(unsigned char *buffer, ULONGLONG size)$/;"	f	class:CLnxServer
SetCCSampleCount	InternalFunctions.cpp	/^bool SetCCSampleCount(CAPDClient *client, uint64_t sampleCount)$/;"	f
SetCCStreamControl	InternalFunctions.cpp	/^bool SetCCStreamControl(CAPDClient *client, unsigned char streamControl)$/;"	f
SetCalibLight	InternalFunctions.cpp	/^bool SetCalibLight(CAPDClient *client, int current)$/;"	f
SetCalibratedMode	DataEvaluation.cpp	/^void CDataEvaluation::SetCalibratedMode(bool calibrated) $/;"	f	class:CDataEvaluation
SetChannel_1	InternalFunctions.cpp	/^bool SetChannel_1(CAPDClient *client, unsigned char address, unsigned char channelMask_1)$/;"	f
SetChannel_2	InternalFunctions.cpp	/^bool SetChannel_2(CAPDClient *client, unsigned char address, unsigned char channelMask_2)$/;"	f
SetChannel_3	InternalFunctions.cpp	/^bool SetChannel_3(CAPDClient *client, unsigned char address, unsigned char channelMask_3)$/;"	f
SetChannel_4	InternalFunctions.cpp	/^bool SetChannel_4(CAPDClient *client, unsigned char address, unsigned char channelMask_4)$/;"	f
SetChannels	InternalFunctions.cpp	/^bool SetChannels(CAPDClient *client, unsigned char address, unsigned char channelMask_1, unsigned char channelMask_2, unsigned char channelMask_3, unsigned char channelMask_4)$/;"	f
SetClockControl	InternalFunctions.cpp	/^bool SetClockControl(CAPDClient *client, unsigned char adClockSource, unsigned char extClockMode, unsigned char sampleSource)$/;"	f
SetClockEnable	InternalFunctions.cpp	/^bool SetClockEnable(CAPDClient *client, unsigned char eioSampleOut, unsigned char controlSampleOut,$/;"	f
SetDACOffset	InternalFunctions.cpp	/^bool SetDACOffset(CAPDClient *client, INT16 *offsets, int first, int no)$/;"	f
SetDumpFile	LnxClasses.cpp	/^void CLnxServer::SetDumpFile(FILE *dumpFile)$/;"	f	class:CLnxServer
SetExtDCM	InternalFunctions.cpp	/^bool SetExtDCM(CAPDClient *client, unsigned char mul, unsigned char div)$/;"	f
SetFilterCoefficients	InternalFunctions.cpp	/^bool SetFilterCoefficients(CAPDClient *client, unsigned char address, UINT16 *coefficints)$/;"	f
SetHV1	InternalFunctions.cpp	/^bool SetHV1(CAPDClient *client, int binValue)$/;"	f
SetHV2	InternalFunctions.cpp	/^bool SetHV2(CAPDClient *client, int binValue)$/;"	f
SetHV3	InternalFunctions.cpp	/^bool SetHV3(CAPDClient *client, int binValue)$/;"	f
SetHV4	InternalFunctions.cpp	/^bool SetHV4(CAPDClient *client, int binValue)$/;"	f
SetHVState	InternalFunctions.cpp	/^bool SetHVState(CAPDClient *client, int state)$/;"	f
SetIP	LowlevelFunctions.cpp	/^bool SetIP(CAPDClient *client, UINT32 ip_h)$/;"	f
SetIPAddress	LnxClasses.cpp	/^void CLnxClient::SetIPAddress(UINT32 ipAddress_h)$/;"	f	class:CLnxClient
SetIPAddress	LnxClasses.cpp	/^void CLnxClient::SetIPAddress(char *ipAddress)$/;"	f	class:CLnxClient
SetIPAddress	UDPClient.cpp	/^bool CUDPClient::SetIPAddress(UINT32 ipAddress_h)$/;"	f	class:CUDPClient
SetIPAddress	UDPClient.cpp	/^bool CUDPClient::SetIPAddress(char *ipAddress)$/;"	f	class:CUDPClient
SetInternalTriggerLevels	InternalFunctions.cpp	/^bool SetInternalTriggerLevels(CAPDClient *client, UINT16 *levels)$/;"	f
SetListeningPort	LnxClasses.cpp	/^void CLnxServer::SetListeningPort(UINT16 port_h)$/;"	f	class:CLnxServer
SetMulticastUDPStream	InternalFunctions.cpp	/^bool SetMulticastUDPStream(CAPDClient *client, uint8_t streamNum, uint16_t octet, uint32_t ip_h, uint16_t port)$/;"	f
SetNotification	LnxClasses.cpp	/^void CLnxServer::SetNotification(unsigned int requested_data, CEvent *event)$/;"	f	class:CLnxServer
SetOffset	APDTest.cpp	/^int SetOffset(unsigned int offset)$/;"	f
SetOverloadLevel	InternalFunctions.cpp	/^bool SetOverloadLevel(CAPDClient *client, unsigned char address, UINT16 level)$/;"	f
SetOverloadStatus	InternalFunctions.cpp	/^bool SetOverloadStatus(CAPDClient *client, unsigned char address, unsigned char status)$/;"	f
SetOverloadTime	InternalFunctions.cpp	/^bool SetOverloadTime(CAPDClient *client, unsigned char address, UINT16 time)$/;"	f
SetPLL	APDTest.cpp	/^int SetPLL(int mul, int div0, int div1)$/;"	f
SetPacketSize	LnxClasses.cpp	/^void CLnxServer::SetPacketSize(unsigned int packetsize)$/;"	f	class:CLnxServer
SetParams	DataEvaluation.cpp	/^bool CDataEvaluation::SetParams(unsigned int bits, uint32_t channelMask, unsigned int packetSize) $/;"	f	class:CDataEvaluation
SetPort	UDPClient.cpp	/^void CUDPClient::SetPort(UINT16 port_h)$/;"	f	class:CUDPClient
SetResolution	InternalFunctions.cpp	/^bool SetResolution(CAPDClient *client, unsigned char address, int bitNum)$/;"	f
SetRingbufferSize	InternalFunctions.cpp	/^bool SetRingbufferSize(CAPDClient *client, unsigned char address, UINT16 bufferSize)$/;"	f
SetSampleDiv	InternalFunctions.cpp	/^bool SetSampleDiv(CAPDClient *client, UINT16 sampleDiv)$/;"	f
SetShutterMode	HighlevelFunctions.cpp	/^ADT_RESULT SetShutterMode(ADT_HANDLE handle, int mode)$/;"	f
SetShutterMode	InternalFunctions.cpp	/^bool SetShutterMode(CAPDClient *client, int mode)$/;"	f
SetShutterState	InternalFunctions.cpp	/^bool SetShutterState(CAPDClient *client, int state)$/;"	f
SetSignalFrequency	LnxClasses.cpp	/^void CLnxServer::SetSignalFrequency(unsigned int frequency)$/;"	f	class:CLnxServer
SetStreamInterface	LnxClasses.cpp	/^void CLnxServer::SetStreamInterface(const char *ifname)$/;"	f	class:CLnxServer
SetStreamSerial	LnxClasses.cpp	/^void CLnxServer::SetStreamSerial(uint32_t serial)$/;"	f	class:CLnxServer
SetTestMode	InternalFunctions.cpp	/^bool SetTestMode(CAPDClient *client, UINT32 mode)$/;"	f
SetTimeout	LnxClasses.cpp	/^void CLnxClient::SetTimeout(int timeout)$/;"	f	class:CLnxClient
SetTimeout	UDPClient.cpp	/^void CUDPClient::SetTimeout(int timeout)$/;"	f	class:CUDPClient
SetTiming	APDTest.cpp	/^int SetTiming(int basicPLLmul, int basicPLLdiv_0, int basicPLLdiv_1, int clkSrc, int extDCMmul, int extDCMdiv)$/;"	f
SetTrigger	DataEvaluation.cpp	/^void CDataEvaluation::SetTrigger(ADT_TRIGGERINFO *triggerInfo)$/;"	f	class:CDataEvaluation
SetTrigger	InternalFunctions.cpp	/^bool SetTrigger(CAPDClient *client, ADT_TRIGGER_CONTROL triggerControl, uint32_t triggerDelay)$/;"	f
SetTrigger	InternalFunctions.cpp	/^bool SetTrigger(CAPDClient *client, ADT_TRIGGER_MODE triggerSource, ADT_TRIGGER_EDGE triggerEdge, uint32_t delay)$/;"	f
SetType	LnxClasses.cpp	/^void CLnxServer::SetType(SERVER_TYPE type)$/;"	f	class:CLnxServer
SetUDPPort	LnxClasses.cpp	/^void CLnxClient::SetUDPPort(UINT16 port_h)$/;"	f	class:CLnxClient
SetUDPStream	InternalFunctions.cpp	/^bool SetUDPStream(CAPDClient *client, uint8_t streamNum, uint16_t octet, uint8_t mac[6], uint32_t ip_h, uint16_t port)$/;"	f
SetupCalibrationData	DataEvaluation.cpp	/^bool CDataEvaluation::SetupCalibrationData(CAPDClient *client, int streamNo)$/;"	f	class:CDataEvaluation
Sleep	helper.cpp	/^void Sleep(int64_t msec)$/;"	f
Start	APDTest.cpp	/^int Start()$/;"	f
Start	LnxClasses.cpp	/^bool CLnxServer::Start()$/;"	f	class:CLnxServer
Start	LnxClasses.cpp	/^void CLnxClient::Start()$/;"	f	class:CLnxClient
Start	SysLnxClasses.cpp	/^bool Thread::Start(bool wait)$/;"	f	class:Thread
StartFUP	APDTest.cpp	/^int StartFUP()$/;"	f
StartFUP	LowlevelFunctions.cpp	/^bool StartFUP(CAPDClient *client, unsigned char * date, unsigned char *buffer, UINT32 ip_address_h, UINT16 ip_port_h, int timeout)$/;"	f
StartFirmwareUpdate	InternalFunctions.cpp	/^bool StartFirmwareUpdate(CAPDClient *client, unsigned char *  date, UINT32 ipAddress_h, UINT16 ipPort_h, int timeout)$/;"	f
Stop	APDTest.cpp	/^int Stop()$/;"	f
Stop	LnxClasses.cpp	/^void CLnxClient::Stop()$/;"	f	class:CLnxClient
Stop	LnxClasses.cpp	/^void CLnxServer::Stop()$/;"	f	class:CLnxServer
Stop	SysLnxClasses.cpp	/^void Thread::Stop()$/;"	f	class:Thread
StoreADCOffsets	InternalFunctions.cpp	/^bool StoreADCOffsets(CAPDClient *client, INT16 *adcOffsets, int first, int no)$/;"	f
StoreADCOffsets_01mV	InternalFunctions.cpp	/^bool StoreADCOffsets_01mV(CAPDClient *client, INT16 *adcOffsets, int first, int no)$/;"	f
StoreDACOffsets_01mV	InternalFunctions.cpp	/^bool StoreDACOffsets_01mV(CAPDClient *client, INT16 *dacOffsets, int first, int no)$/;"	f
Stream	HighlevelFunctions.cpp	/^} Stream;$/;"	t	typeref:struct:_Stream	file:
SwOptions	APDTest.cpp	/^void SwOptions()$/;"	f
SyncADC	APDTest.cpp	/^int SyncADC()$/;"	f
Thread	SysLnxClasses.cpp	/^Thread::Thread() :$/;"	f	class:Thread
Trigger	APDTest.cpp	/^int Trigger(int triggerSource, int triggerMode, int triggerEdge, int delay, char * triggerFileName)$/;"	f
Trigger	DataEvaluation.cpp	/^void CDataEvaluation::Trigger(int channel, INT16 data)$/;"	f	class:CDataEvaluation
Trigger	DataEvaluation.cpp	/^void CTriggerManager::Trigger(LONGLONG count)$/;"	f	class:CTriggerManager
UDPBase	SysLnxClasses.cpp	/^UDPBase::UDPBase() :$/;"	f	class:UDPBase
Validate	GECCommands.cpp	/^bool DDTOIPHEADER::Validate()$/;"	f	class:DDTOIPHEADER
WORKING_SET	HighlevelFunctions.cpp	/^} WORKING_SET;$/;"	t	typeref:struct:tagWORKING_SET	file:
Wait	APDTest.cpp	/^int Wait(int timeout)$/;"	f
Wait	LnxClasses.cpp	/^bool CLnxEvent::Wait(int timeout)$/;"	f	class:CLnxEvent
WaitAll	LnxClasses.cpp	/^CWaitForEvents::WAIT_RESULT CLnxWaitForEvents::WaitAll(int timeout) $/;"	f	class:CLnxWaitForEvents
WaitAny	LnxClasses.cpp	/^CWaitForEvents::WAIT_RESULT CLnxWaitForEvents::WaitAny(int *index)$/;"	f	class:CLnxWaitForEvents
WaitAny	LnxClasses.cpp	/^CWaitForEvents::WAIT_RESULT CLnxWaitForEvents::WaitAny(int size, struct timeval *begin, int *timeout, bool update_timeout, int *index)$/;"	f	class:CLnxWaitForEvents
WaitAny	LnxClasses.cpp	/^CWaitForEvents::WAIT_RESULT CLnxWaitForEvents::WaitAny(int timeout, int *index)$/;"	f	class:CLnxWaitForEvents
Write	APDTest.cpp	/^int Write(unsigned char address, UINT32 subaddress, int numbytes, unsigned char *data)$/;"	f
WritePDI	LowlevelFunctions.cpp	/^bool WritePDI(CAPDClient *client, unsigned char address, UINT32 subaddress, unsigned char* buffer, int noofbytes, UINT32 ip_address_h, UINT16 ip_port_h, int timeout)$/;"	f
_Stream	HighlevelFunctions.cpp	/^typedef struct _Stream$/;"	s	file:
address	HighlevelFunctions.cpp	/^	int              address;$/;"	m	struct:_Stream	file:
basicPLLdiv_0	HighlevelFunctions.cpp	/^	unsigned char basicPLLdiv_0;$/;"	m	struct:tagWORKING_SET	file:
basicPLLdiv_1	HighlevelFunctions.cpp	/^	unsigned char basicPLLdiv_1;$/;"	m	struct:tagWORKING_SET	file:
basicPLLmul	HighlevelFunctions.cpp	/^	unsigned char basicPLLmul;$/;"	m	struct:tagWORKING_SET	file:
bits	HighlevelFunctions.cpp	/^	int              bits;$/;"	m	struct:_Stream	file:
bufferSizeInSampleNo	HighlevelFunctions.cpp	/^	uint64_t bufferSizeInSampleNo;	\/\/ the size of buffers in samples. The real size of a buffer depends on the data type, stored in that buffer.$/;"	m	struct:tagWORKING_SET	file:
channelMask	HighlevelFunctions.cpp	/^	uint32_t         channelMask;$/;"	m	struct:_Stream	file:
client	HighlevelFunctions.cpp	/^	CAPDClient *client;$/;"	m	struct:tagWORKING_SET	file:
clkSource	HighlevelFunctions.cpp	/^	int clkSource;$/;"	m	struct:tagWORKING_SET	file:
command_port_h	HighlevelFunctions.cpp	/^	uint16_t command_port_h; \/\/ port number for commands$/;"	m	struct:tagWORKING_SET	file:
createPollFd	LnxClasses.cpp	/^void CLnxWaitForEvents::createPollFd()$/;"	f	class:CLnxWaitForEvents
dataNotification	HighlevelFunctions.cpp	/^	CEvent          *dataNotification; \/\/ Set by the server to notify the data processor to start data evaluation;$/;"	m	struct:_Stream	file:
eval	HighlevelFunctions.cpp	/^	CDataEvaluation *eval;$/;"	m	struct:_Stream	file:
extDCMdiv	HighlevelFunctions.cpp	/^	unsigned char extDCMdiv;$/;"	m	struct:tagWORKING_SET	file:
extDCMmul	HighlevelFunctions.cpp	/^	unsigned char extDCMmul;$/;"	m	struct:tagWORKING_SET	file:
flat	dump_parser.cpp	/^	uint16_t flat;$/;"	m	union:BIG	file:
flat	dump_parser.cpp	/^	uint16_t flat;$/;"	m	union:LITTLE	file:
flat	dump_parser.cpp	/^	uint8_t flat;$/;"	m	union:S1_H	file:
flat	dump_parser.cpp	/^	uint8_t flat;$/;"	m	union:S1_L	file:
g_CmdSet	GECCommands.cpp	/^int CReplyCmdSet::g_CmdSet[] = {OP_SENDACK, OP_READPDI, OP_FLREAD, OP_STARTFUP};$/;"	m	class:CReplyCmdSet	file:
g_WorkingSets	HighlevelFunctions.cpp	/^WORKING_SET g_WorkingSets[SLOTNUMBER];$/;"	v
g_handle	APDTest.cpp	/^ADT_HANDLE g_handle = 0;$/;"	v
g_pFactory	HighlevelFunctions.cpp	/^CAPDFactory* CAPDFactory::g_pFactory;$/;"	m	class:CAPDFactory	file:
g_sampleCount	APDTest.cpp	/^int g_sampleCount = 0;$/;"	v
handle	HighlevelFunctions.cpp	/^	INTERNAL_HANDLE handle;$/;"	m	struct:tagWORKING_SET	file:
handle	HighlevelFunctions.cpp	/^	unsigned int handle;$/;"	m	union:INTERNAL_HANDLE	file:
handle	main.cpp	/^ADT_HANDLE handle;$/;"	v
index	HighlevelFunctions.cpp	/^		unsigned int index : 8;$/;"	m	struct:INTERNAL_HANDLE::__anon5	file:
ip_h	HighlevelFunctions.cpp	/^	uint32_t ip_h; \/\/ ip in host format$/;"	m	struct:tagWORKING_SET	file:
lock	DataEvaluation.cpp	/^void CLnxTriggerManager::lock()$/;"	f	class:CLnxTriggerManager
lock	SysLnxClasses.cpp	/^void Mutex::lock()$/;"	f	class:Mutex
m_LockedSoFar	LnxClasses.cpp	/^ULONGLONG CLnxNPMAllocator::m_LockedSoFar = 0;$/;"	m	class:CLnxNPMAllocator	file:
magic_number	HighlevelFunctions.cpp	/^		unsigned int magic_number : 24;$/;"	m	struct:INTERNAL_HANDLE::__anon5	file:
main	APDMonitor.cpp	/^int main()$/;"	f
main	APDTest.cpp	/^int main(int argc, char* argv[])$/;"	f
main	RegReadTest.cpp	/^int main(int argc, char *argv[])$/;"	f
main	dump_parser.cpp	/^int main(int argc, char* argv[])$/;"	f
main	main.cpp	/^int main(int argc, char *argv[])$/;"	f
memcpy_s	helper.cpp	/^int memcpy_s(void *dest, size_t nelem, const void *src, size_t count)$/;"	f
millisec_to_timeval	LnxClasses.cpp	/^static void millisec_to_timeval(int msec, struct timeval *tval)$/;"	f	file:
n_streams	HighlevelFunctions.cpp	/^	int    n_streams;$/;"	m	struct:tagWORKING_SET	file:
np_memory	HighlevelFunctions.cpp	/^	CNPMAllocator   *np_memory;$/;"	m	struct:_Stream	file:
operator =	HighlevelFunctions.cpp	/^	INTERNAL_HANDLE &operator=(ADT_HANDLE ah)$/;"	f	union:INTERNAL_HANDLE
operator ADT_HANDLE	HighlevelFunctions.cpp	/^	operator ADT_HANDLE() const$/;"	f	union:INTERNAL_HANDLE
packetsize	HighlevelFunctions.cpp	/^	unsigned int packetsize;$/;"	m	struct:tagWORKING_SET	file:
primary_buffer	HighlevelFunctions.cpp	/^	unsigned char   *primary_buffer;$/;"	m	struct:_Stream	file:
primary_buffer_size	HighlevelFunctions.cpp	/^	uint64_t         primary_buffer_size;$/;"	m	struct:_Stream	file:
requestedData	HighlevelFunctions.cpp	/^	uint64_t         requestedData;$/;"	m	struct:_Stream	file:
reserved	dump_parser.cpp	/^		unsigned int reserved : 12;$/;"	m	struct:BIG::__anon1	file:
reserved	dump_parser.cpp	/^		unsigned int reserved : 6;$/;"	m	struct:LITTLE::__anon2	file:
reserved	dump_parser.cpp	/^		unsigned int reserved : 6;$/;"	m	struct:S1_H::__anon3	file:
reserved	dump_parser.cpp	/^		unsigned int reserved : 6;$/;"	m	struct:S1_L::__anon4	file:
reverseBits	HighlevelFunctions.cpp	/^unsigned char reverseBits(unsigned char in_byte)$/;"	f
sampleCount	HighlevelFunctions.cpp	/^	uint64_t sampleCount;	\/\/ Number of samples, required after start or trigger;$/;"	m	struct:tagWORKING_SET	file:
sampleDiv	HighlevelFunctions.cpp	/^	UINT16 sampleDiv;$/;"	m	struct:tagWORKING_SET	file:
sample_start_condition	dump_parser.cpp	/^		unsigned int sample_start_condition : 1;$/;"	m	struct:BIG::__anon1	file:
sample_start_condition	dump_parser.cpp	/^		unsigned int sample_start_condition : 1;$/;"	m	struct:LITTLE::__anon2	file:
sample_start_condition	dump_parser.cpp	/^		unsigned int sample_start_condition : 1;$/;"	m	struct:S1_L::__anon4	file:
setAllOffset	InternalFunctions.cpp	/^bool setAllOffset(CAPDClient *  client, int numADC, int * addresses, unsigned int offset)$/;"	f
setupComplete	HighlevelFunctions.cpp	/^	bool setupComplete;$/;"	m	struct:tagWORKING_SET	file:
start_handler	SysLnxClasses.cpp	/^void* Thread::start_handler(void *param)$/;"	f	class:Thread
state	HighlevelFunctions.cpp	/^	ADT_STATE state;$/;"	m	struct:tagWORKING_SET	file:
streamInterface	HighlevelFunctions.cpp	/^	char   streamInterface[32];$/;"	m	struct:tagWORKING_SET	file:
streamSerial_n	HighlevelFunctions.cpp	/^	uint32_t streamSerial_n; \/\/ The four byte long Serial used as magic number in CC_STREAMHEADER in Network Byte Order$/;"	m	struct:tagWORKING_SET	file:
stream_num	dump_parser.cpp	/^		unsigned int stream_num : 2;$/;"	m	struct:BIG::__anon1	file:
stream_num	dump_parser.cpp	/^		unsigned int stream_num : 2;$/;"	m	struct:LITTLE::__anon2	file:
stream_num	dump_parser.cpp	/^		unsigned int stream_num : 2;$/;"	m	struct:S1_H::__anon3	file:
stream_port_h	HighlevelFunctions.cpp	/^	uint16_t         stream_port_h; \/\/ port number for stream in host format.$/;"	m	struct:_Stream	file:
stream_server	HighlevelFunctions.cpp	/^	CAPDServer      *stream_server;$/;"	m	struct:_Stream	file:
streams	HighlevelFunctions.cpp	/^	Stream streams[MAX_STREAMNUM];$/;"	m	struct:tagWORKING_SET	file:
syncADCs	InternalFunctions.cpp	/^bool syncADCs(CAPDClient *client, int numADC, int * addresses)$/;"	f
tagWORKING_SET	HighlevelFunctions.cpp	/^typedef struct tagWORKING_SET$/;"	s	file:
temp_buffer	HighlevelFunctions.cpp	/^	unsigned char   *temp_buffer;$/;"	m	struct:_Stream	file:
temp_buffer_size	HighlevelFunctions.cpp	/^	uint64_t         temp_buffer_size;$/;"	m	struct:_Stream	file:
timeval_to_millisec	LnxClasses.cpp	/^static int timeval_to_millisec(struct timeval *tv)$/;"	f	file:
triggerManager	HighlevelFunctions.cpp	/^	CTriggerManager *triggerManager; \/\/ Used to synchronize sw triggers.$/;"	m	struct:tagWORKING_SET	file:
udp_test_mode	dump_parser.cpp	/^		unsigned int udp_test_mode : 1;$/;"	m	struct:BIG::__anon1	file:
udp_test_mode	dump_parser.cpp	/^		unsigned int udp_test_mode : 1;$/;"	m	struct:LITTLE::__anon2	file:
udp_test_mode	dump_parser.cpp	/^		unsigned int udp_test_mode : 1;$/;"	m	struct:S1_L::__anon4	file:
unlock	DataEvaluation.cpp	/^void CLnxTriggerManager::unlock()$/;"	f	class:CLnxTriggerManager
unlock	SysLnxClasses.cpp	/^void Mutex::unlock()$/;"	f	class:Mutex
userNotification	HighlevelFunctions.cpp	/^	CEvent          *userNotification;	\/\/ Set by the data processor to notify user$/;"	m	struct:_Stream	file:
user_buffer	HighlevelFunctions.cpp	/^	unsigned char   *user_buffer;$/;"	m	struct:_Stream	file:
user_buffer_size	HighlevelFunctions.cpp	/^	uint64_t         user_buffer_size;$/;"	m	struct:_Stream	file:
waitObject	HighlevelFunctions.cpp	/^	CWaitForEvents* waitObject; \/\/ User notifiaction objects. Objects set by the data evaluators.$/;"	m	struct:tagWORKING_SET	file:
~CDataEvaluation	DataEvaluation.cpp	/^CDataEvaluation::~CDataEvaluation()$/;"	f	class:CDataEvaluation
~CLnxClient	LnxClasses.cpp	/^CLnxClient::~CLnxClient()$/;"	f	class:CLnxClient
~CLnxClientContext	LnxClasses.cpp	/^CLnxClientContext::~CLnxClientContext()$/;"	f	class:CLnxClientContext
~CLnxEvent	LnxClasses.cpp	/^CLnxEvent::~CLnxEvent()$/;"	f	class:CLnxEvent
~CLnxServer	LnxClasses.cpp	/^CLnxServer::~CLnxServer()$/;"	f	class:CLnxServer
~CLnxTriggerManager	DataEvaluation.cpp	/^CLnxTriggerManager::~CLnxTriggerManager()$/;"	f	class:CLnxTriggerManager
~CMemDesc	LnxClasses.cpp	/^CLnxNPMAllocator::CMemDesc::~CMemDesc()$/;"	f	class:CLnxNPMAllocator::CMemDesc
~CTriggerManager	DataEvaluation.cpp	/^CTriggerManager::~CTriggerManager()$/;"	f	class:CTriggerManager
~CUDPClient	UDPClient.cpp	/^CUDPClient::~CUDPClient(void)$/;"	f	class:CUDPClient
~CUDPServer	UDPServer.cpp	/^CUDPServer::~CUDPServer(void)$/;"	f	class:CUDPServer
~Mutex	SysLnxClasses.cpp	/^Mutex::~Mutex()$/;"	f	class:Mutex
~MutexGuard	SysLnxClasses.cpp	/^MutexGuard::~MutexGuard()$/;"	f	class:MutexGuard
~Thread	SysLnxClasses.cpp	/^Thread::~Thread()$/;"	f	class:Thread
~UDPBase	SysLnxClasses.cpp	/^UDPBase::~UDPBase()$/;"	f	class:UDPBase
